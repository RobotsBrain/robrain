#ifndef _MP4PARSER_H_#define _MP4PARSER_H_#include <sys/types.h>#include <stdint.h>#include <stdio.h>#define MP4PARSER_NO_ERROR            (uint16_t)0#define MP4PARSER_ERROR_INIT          (uint16_t)1#define MP4PARSER_ERROR_PARAMETER     (uint16_t)2#define MP4PARSER_ERROR_READFILE      (uint16_t)3#define MP4PARSER_ERROR_INVALIDTRACK  (uint16_t)4#define MP4PARSER_ERROR_INVALIDAVCC   (uint16_t)5#define MP4PARSER_ERROR_INVALIDSAMPLE (uint16_t)6#define MP4PARSER_ERROR_CREATETHREAD  (uint16_t)7#define MP4PARSER_ERROR_BUFALLOCATE   (uint16_t)8#define MP4PARSER_ERROR_INVALIDESDS   (uint16_t)9	#define MP4PARSER_SATUS_UNUSED        (uint16_t)0#define MP4PARSER_SATUS_PARSING       (uint16_t)1#define MP4PARSER_SATUS_PARSED        (uint16_t)2#define MP4PARSER_SATUS_PARSEFAIL     (uint16_t)3	 #define MP4_AUDIO_ADTSHDR_LEN  7 class CMp4File;class CMp4FileCallBack {public:    virtual void OnVideoCallBack(const CMp4File *pcParser, const u_char *pPacketPtr, const uint16_t wPackLen, const bool bKeyFrame) = 0;    virtual void OnAudioCallBack(const CMp4File *pcParser, const u_char *pPacketPtr, const uint16_t wPackLen) = 0;}; class CMp4File{public:    CMp4File(CMp4FileCallBack *pcCallBack);    virtual ~CMp4File();         uint16_t SetFile(const char *pInFile);    uint16_t StartParse();    uint16_t StopParse();    void ThreadProcMain(void);  private:    bool GetH264Param(u_char *pchSPS, uint16_t wMaxSPSLen,                        uint16_t *pwRealSPSLen, u_char *pchPPS, uint16_t wMaxPPSLen, uint16_t *pwRealPPSLen);    	    bool ConstructAudioHeader(u_char *pHdr, u_char ucProfile,                                u_char ucFreqIdx, u_char ucChanCfg, uint16_t wPacketLen);    bool ProcessVideoSamples(unsigned long dwStartMs, uint32_t dwVideoId, uint32_t *pdwNextVideoId);    bool ProcessAudioSamples(unsigned long dwStartMs, uint32_t dwAudioId, uint32_t *pdwNextAudioId);   private:    CMp4FileCallBack * m_pcCallBack;    uint32_t m_dwVideoTrackID;	//only support H.264 now	uint32_t m_dwAudioTrackID;	//only support MP4A/AAC now	void *m_pHandle;    char *m_pInFile;    uint16_t m_wSPSLen;    u_char *m_pchSPS;    uint16_t m_wPPSLen;	    u_char *m_pchPPS;         u_char *m_pchVideoWriteSample;    u_char *m_pchAudioWriteSample;    u_char m_ucAudioChanNum;    u_char m_ucAudioType;    u_char m_ucAudioFrequencies;	    u_char m_achAudioHeader[MP4_AUDIO_ADTSHDR_LEN];};#endif //_MP4PARSER_H_	