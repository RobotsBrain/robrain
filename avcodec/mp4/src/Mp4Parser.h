#ifndef _MP4PARSER_H_#define _MP4PARSER_H_#include <sys/types.h>#include <stdint.h>#include <stdio.h>#include <string>class CMp4ParserCallBack {public:    virtual void OnVideoCallBack(void *thiz, const u_char *pPacketPtr, const uint16_t wPackLen, const bool bKeyFrame) = 0;    virtual void OnAudioCallBack(void *thiz, const u_char *pHeader, const uint16_t wHeaderSize,                                     const u_char *pPacketPtr, const uint16_t wPackLen) = 0;}; class CMp4Parser{public:    CMp4Parser(CMp4ParserCallBack *pcCallBack, std::string pInFile);    virtual ~CMp4Parser();    bool Start();    bool Stop();  private:    void ParseTrackId();    bool GetAacParam();    bool GetH264Param();    	    bool ConstructAudioHeader(u_char *pHdr, u_char ucProfile, u_char ucFreqIdx, u_char ucChanCfg, uint16_t wPacketLen);    bool ProcessVideoSamples(unsigned long dwStartMs, uint32_t &dwVideoId);    bool ProcessAudioSamples(unsigned long dwStartMs, uint32_t &dwAudioId);    void Analysis();   private:    CMp4ParserCallBack * m_pcCallBack;    std::string m_pInFile;    uint32_t m_dwVideoTrackID;	//only support H.264 now	uint32_t m_dwAudioTrackID;	//only support MP4A/AAC now	void *m_pHandle;        uint16_t m_wSPSLen;    u_char *m_pchSPS;    uint16_t m_wPPSLen;	    u_char *m_pchPPS;    u_char m_ucAudioChanNum;    u_char m_ucAudioType;    u_char m_ucAudioFrequencies;	};#endif //_MP4PARSER_H_	