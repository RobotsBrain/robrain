#ifndef _MP4PARSER_H_#define _MP4PARSER_H_#include <stdio.h>#define MP4PARSER_NO_ERROR            (unsigned short)0#define MP4PARSER_ERROR_INIT          (unsigned short)1#define MP4PARSER_ERROR_PARAMETER     (unsigned short)2#define MP4PARSER_ERROR_READFILE      (unsigned short)3#define MP4PARSER_ERROR_INVALIDTRACK  (unsigned short)4#define MP4PARSER_ERROR_INVALIDAVCC   (unsigned short)5#define MP4PARSER_ERROR_INVALIDSAMPLE (unsigned short)6#define MP4PARSER_ERROR_CREATETHREAD  (unsigned short)7#define MP4PARSER_ERROR_BUFALLOCATE   (unsigned short)8#define MP4PARSER_ERROR_INVALIDESDS   (unsigned short)9	#define MP4PARSER_SATUS_UNUSED        (unsigned short)0#define MP4PARSER_SATUS_PARSING       (unsigned short)1#define MP4PARSER_SATUS_PARSED        (unsigned short)2#define MP4PARSER_SATUS_PARSEFAIL     (unsigned short)3	 #define MP4_AUDIO_ADTSHDR_LEN  7  typedef struct _tagMp4VideoInfo {    unsigned short frame_rate;    unsigned short width;    unsigned short height;     unsigned short bitrate;	//unit: kbps    unsigned int duration;		//sec    	     _tagMp4VideoInfo()     : frame_rate(0)     , width(0)     , height(0)     , bitrate(0)     , duration(0)     {    }} Mp4VideoInfo; class CMp4File;class CMp4FileCallBack {public:    virtual void OnVideoCallBack(const CMp4File *pcParser, const unsigned char *pPacketPtr,                                   const unsigned short wPackLen, const bool bKeyFrame) = 0;    	    virtual void OnAudioCallBack(const CMp4File *pcParser, const unsigned char *pPacketPtr, const unsigned short wPackLen) = 0;}; class CMp4File{public:    CMp4File(CMp4FileCallBack * pcCallBack);    virtual ~CMp4File();         unsigned short SetFile(const char *pInFile);    unsigned short StartParse();    unsigned short StopParse();    void ThreadProcMain(void);  private:    bool GetH264Param(unsigned char *pchSPS, unsigned short wMaxSPSLen,                        unsigned short *pwRealSPSLen, unsigned char *pchPPS, unsigned short wMaxPPSLen, unsigned short *pwRealPPSLen);    	    bool ConstructAudioHeader(unsigned char *pHdr, unsigned char ucProfile,                                unsigned char ucFreqIdx, unsigned char ucChanCfg, unsigned short wPacketLen);    bool ProcessVideoSamples(unsigned long dwStartMs, unsigned int dwVideoId,    								      unsigned int *pdwNextVideoId);    	    bool ProcessAudioSamples(unsigned long dwStartMs, unsigned int dwAudioId,    								    unsigned int *pdwNextAudioId);   private:    CMp4FileCallBack * m_pcCallBack;    unsigned int m_dwVideoTrackID;	//only support H.264 now	unsigned int m_dwAudioTrackID;	//only support MP4A/AAC now	void *m_pMp4FileHandle;    char *m_pInFile;    unsigned short m_wSPSLen;    unsigned char *m_pchSPS;    unsigned short m_wPPSLen;	    unsigned char *m_pchPPS;    Mp4VideoInfo m_stVideoInfo;         unsigned char *m_pchVideoWriteSample;    unsigned char *m_pchAudioWriteSample;    unsigned char m_ucAudioChanNum;    unsigned char m_ucAudioType;    unsigned char m_ucAudioFrequencies;	    unsigned char m_achAudioHeader[MP4_AUDIO_ADTSHDR_LEN];};#endif //_MP4PARSER_H_	