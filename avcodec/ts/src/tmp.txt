/*ÎÄ¼þÊý¾ÝÐ´ÈëtsÎÄ¼þ*/
int WriteBuf2File(unsigned int framerate)
{
	unsigned long  Timestamp_video = 0;    //Ò»Ö¡ÊÓÆµËùÓÃÊ±¼ä
	unsigned long  Timestamp_audio = 0;    //Ò»Ö¡ÒôÆµËùÓÃÊ±¼ä 
	unsigned int   audiosamplerate = 0;    //ÒôÆµ²ÉÑùÂÊ
	unsigned int   videoframetype =  0;    //ÊÓÆµÖ¡ÀàÐÍ
	Ts_Adaptation_field  ts_adaptation_field_Head ; 
	Ts_Adaptation_field  ts_adaptation_field_Tail ;
	unsigned int WritePacketNum;

	//²éÕÒAACÎÄ¼þµÄÐÅÏ¢,Ìí¼ÓadtsÍ·
	ADTS_HEADER adtsheader;
	Detach_Head_Aac(&adtsheader,m_One_Frame_Buf); 
	if (adtsheader.sf_index == 0x04) {
		//audiosamplerate = 44100;
		audiosamplerate = 8000;
	} else if (adtsheader.sf_index == 0x03) {
		audiosamplerate = 48000;
	}

	//½«ÒôÆµÎÄ¼þÒÆ¶¯µ½¿ªÍ·
	if (fseek(pAudio_Aac_File, 0, 0) < 0) { //³É¹¦£¬·µ»Ø0£¬Ê§°Ü·µ»Ø-1
		printf("fseek : pAudio_Aac_File Error\n");
		return getchar();
	}

	//¿ªÊ¼Ñ­»·Ð´ÈëÒôÊÓÆµÊý¾Ý
	for (;;) {
		if (/*ÎÄ¼þ¶ÁÈ¡Íê±Ï*/(decode_video_done && decode_audio_done)) {
			break;
		}
		//ÒôÆµÎÄ¼þ¶ÁÈ¡Íê±Ï
		if (decode_audio_done) {
			Take_Out_Pes(&m_audio_tspes ,Timestamp_audio,0x01,NULL);
			if (m_audio_tspes.Pes_Packet_Length_Beyond != 0) {
				printf("PES_AUDIO  :  SIZE = %d\n",m_audio_tspes.Pes_Packet_Length_Beyond);
				//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
				WriteAdaptive_flags_Tail(&ts_adaptation_field_Head); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾  ,ÕâÀï×¢Òâ ÒôÆµÀàÐÍ²»ÒªËãpcr ËùÒÔ¶¼ÓÃÖ¡Î²´úÌæ¾ÍÐÐ
				WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
				PES2TS(&m_audio_tspes,TS_AAC_PID ,&ts_adaptation_field_Head ,&ts_adaptation_field_Tail,Timestamp_video,Timestamp_audio);
				//¼ÆËãÒ»Ö¡ÒôÆµËùÓÃÊ±¼ä
				Timestamp_audio += 1024*1000* 90/audiosamplerate;
			}
			continue;
		}

		//ÊÓÆµÎÄ¼þ¶ÁÈ¡Íê±Ï
		if (decode_video_done) {
			Take_Out_Pes(&m_video_tspes ,Timestamp_video,0x00,&videoframetype);
			if (m_video_tspes.Pes_Packet_Length_Beyond != 0) {
				printf("PES_VIDEO  :  SIZE = %d\n",m_video_tspes.Pes_Packet_Length_Beyond);
				if (videoframetype == FRAME_I || videoframetype == FRAME_P || videoframetype == FRAME_B) {
					//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
					WriteAdaptive_flags_Head(&ts_adaptation_field_Head,Timestamp_video); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Í·
					WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
					//¼ÆËãÒ»Ö¡ÊÓÆµËùÓÃÊ±¼ä
					PES2TS(&m_video_tspes,TS_H264_PID ,&ts_adaptation_field_Head ,&ts_adaptation_field_Tail,Timestamp_video,Timestamp_audio);
					Timestamp_video += 1000* 90/framerate;
				} else {
					//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
					WriteAdaptive_flags_Tail(&ts_adaptation_field_Head); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾  ,ÕâÀï×¢Òâ ÆäËüÖ¡ÀàÐÍ²»ÒªËãpcr ËùÒÔ¶¼ÓÃÖ¡Î²´úÌæ¾ÍÐÐ
					WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
					PES2TS(&m_video_tspes,TS_H264_PID ,&ts_adaptation_field_Head ,&ts_adaptation_field_Tail,Timestamp_video,Timestamp_audio);
				}
			}
			continue;
		}

		/* write interleaved audio and video frames */
		if ( Timestamp_audio > Timestamp_video ) {
			Take_Out_Pes(&m_video_tspes ,Timestamp_video,0x00,&videoframetype);
			if (m_video_tspes.Pes_Packet_Length_Beyond != 0) {
				printf("PES_VIDEO  :  SIZE = %d\n",m_video_tspes.Pes_Packet_Length_Beyond);
				if (videoframetype == FRAME_I || videoframetype == FRAME_P || videoframetype == FRAME_B) {
					//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
					WriteAdaptive_flags_Head(&ts_adaptation_field_Head,Timestamp_video); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Í·
					WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
					//¼ÆËãÒ»Ö¡ÊÓÆµËùÓÃÊ±¼ä
					PES2TS(&m_video_tspes,TS_H264_PID ,&ts_adaptation_field_Head ,&ts_adaptation_field_Tail,Timestamp_video,Timestamp_audio);
					Timestamp_video += 1000* 90/framerate;   //90khz
				} else {
					//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
					WriteAdaptive_flags_Tail(&ts_adaptation_field_Head); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾  ,ÕâÀï×¢Òâ ÆäËüÖ¡ÀàÐÍ²»ÒªËãpcr ËùÒÔ¶¼ÓÃÖ¡Î²´úÌæ¾ÍÐÐ
					WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
					PES2TS(&m_video_tspes,TS_H264_PID ,&ts_adaptation_field_Head ,&ts_adaptation_field_Tail,Timestamp_video,Timestamp_audio);
				}
			}
		} else {
			Take_Out_Pes(&m_audio_tspes ,Timestamp_audio,0x01,NULL);
			if (m_audio_tspes.Pes_Packet_Length_Beyond != 0)
			{
				printf("PES_AUDIO  :  SIZE = %d\n",m_audio_tspes.Pes_Packet_Length_Beyond);
				//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
				WriteAdaptive_flags_Tail(&ts_adaptation_field_Head); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾  ,ÕâÀï×¢Òâ ÒôÆµÀàÐÍ²»ÒªËãpcr ËùÒÔ¶¼ÓÃÖ¡Î²´úÌæ¾ÍÐÐ
				WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
				PES2TS(&m_audio_tspes,TS_AAC_PID ,&ts_adaptation_field_Head ,&ts_adaptation_field_Tail,Timestamp_video,Timestamp_audio);
				//¼ÆËãÒ»Ö¡ÒôÆµËùÓÃÊ±¼ä
				Timestamp_audio += 1024*1000* 90/audiosamplerate;
			}
		}
	}

	return 1;
}


int WriteH264Buff2File(unsigned int framerate)
{
	unsigned long  Timestamp_video = 0;    //Ò»Ö¡ÊÓÆµËùÓÃÊ±¼ä
	unsigned long  Timestamp_audio = 0;    //Ò»Ö¡ÒôÆµËùÓÃÊ±¼ä 
	unsigned int   audiosamplerate = 0;    //ÒôÆµ²ÉÑùÂÊ
	unsigned int   videoframetype = 0;     //ÊÓÆµÖ¡ÀàÐÍ
	Ts_Adaptation_field  ts_adaptation_field_Head;
	Ts_Adaptation_field  ts_adaptation_field_Tail;
	unsigned int WritePacketNum;

	while (!decode_audio_done) {
		Take_Out_Pes(&m_video_tspes, Timestamp_video, 0x00, &videoframetype);
		if (m_video_tspes.Pes_Packet_Length_Beyond != 0) {
			printf("PES_VIDEO  :  SIZE = %d\n", m_video_tspes.Pes_Packet_Length_Beyond);
			if (videoframetype == FRAME_I || videoframetype == FRAME_P || videoframetype == FRAME_B) {
				//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
				WriteAdaptive_flags_Head(&ts_adaptation_field_Head, Timestamp_video); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Í·
				WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
				//¼ÆËãÒ»Ö¡ÊÓÆµËùÓÃÊ±¼ä
				PES2TS(&m_video_tspes, TS_H264_PID, &ts_adaptation_field_Head, &ts_adaptation_field_Tail, Timestamp_video, Timestamp_audio);
				Timestamp_video += 1000 * 90 / framerate;   //90khz
			} else {
				//ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾
				WriteAdaptive_flags_Tail(&ts_adaptation_field_Head); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾  ,ÕâÀï×¢Òâ ÆäËüÖ¡ÀàÐÍ²»ÒªËãpcr ËùÒÔ¶¼ÓÃÖ¡Î²´úÌæ¾ÍÐÐ
				WriteAdaptive_flags_Tail(&ts_adaptation_field_Tail); //ÌîÐ´×ÔÊÊÓ¦¶Î±êÖ¾Ö¡Î²
				PES2TS(&m_video_tspes, TS_H264_PID, &ts_adaptation_field_Head, &ts_adaptation_field_Tail, Timestamp_video, Timestamp_audio);
			}
		}
	}

	return 1;
}



int Take_Out_Pes(TsPes * tspes ,unsigned long time_pts,unsigned int frametype,unsigned int * videoframetype)
{
	unsigned int pes_pos = 0;

	if (frametype == 0x00) { //ÊÓÆµ
		pes_pos = H2642PES(tspes,time_pts,videoframetype);
	} else {                  //ÒôÆµ
		pes_pos = AAC2PES(tspes,time_pts);  
	}
	return pes_pos;
}


int H2642PES(TsPes * tsh264pes, unsigned long Videopts, unsigned int * videoframetype)
{
	unsigned int h264pes_pos = 0;
	unsigned int OneFrameLen_H264 = 0;

	memset(tsh264pes->Es, 0, MAX_ONE_FRAME_SIZE);
	//¶ÁÈ¡³öÒ»Ö¡Êý¾Ý
	OneFrameLen_H264 = Read_One_H264_Frame(tsh264pes->Es,videoframetype);
	//´ÓÁ÷»ñÈ¡Êý¾Ý

	h264pes_pos += OneFrameLen_H264;

	tsh264pes->packet_start_code_prefix = 0x000001;
	tsh264pes->stream_id = TS_H264_STREAM_ID;                               //E0~EF±íÊ¾ÊÇÊÓÆµµÄ,C0~DFÊÇÒôÆµ,H264-- E0
	tsh264pes->PES_packet_length = 0;                                      //Ò»Ö¡Êý¾ÝµÄ³¤¶È ²»°üº¬ PES°üÍ· ,Õâ¸ö8 ÊÇ ×ÔÊÊÓ¦µÄ³¤¶È,Ìî0 ¿ÉÒÔ×Ô¶¯²éÕÒ
	tsh264pes->Pes_Packet_Length_Beyond = OneFrameLen_H264;

	if (OneFrameLen_H264 > 0xFFFF)                                          //Èç¹ûÒ»Ö¡Êý¾ÝµÄ´óÐ¡³¬³ö½çÏÞ
	{
		tsh264pes->PES_packet_length = 0x00;
		tsh264pes->Pes_Packet_Length_Beyond = OneFrameLen_H264;
		h264pes_pos += 16;
	}
	else
	{
		tsh264pes->PES_packet_length = 0x00;
		tsh264pes->Pes_Packet_Length_Beyond = OneFrameLen_H264;
		h264pes_pos += 14;
	}
	tsh264pes->marker_bit = 0x02;
	tsh264pes->PES_scrambling_control = 0x00;                               //ÈËÑ¡×Ö¶Î ´æÔÚ£¬²»¼ÓÈÅ
	tsh264pes->PES_priority = 0x00;
	tsh264pes->data_alignment_indicator = 0x00;
	tsh264pes->copyright = 0x00;
	tsh264pes->original_or_copy = 0x00;
	tsh264pes->PTS_DTS_flags = 0x02;                                         //10'£ºPTS×Ö¶Î´æÔÚ,DTS²»´æÔÚ
	tsh264pes->ESCR_flag = 0x00;
	tsh264pes->ES_rate_flag = 0x00;
	tsh264pes->DSM_trick_mode_flag = 0x00;
	tsh264pes->additional_copy_info_flag = 0x00;
	tsh264pes->PES_CRC_flag = 0x00;
	tsh264pes->PES_extension_flag = 0x00;
	tsh264pes->PES_header_data_length = 0x05;                                //ºóÃæµÄÊý¾Ý °üÀ¨ÁËPTSËùÕ¼µÄ×Ö½ÚÊý

	//Çå 0 
	tsh264pes->tsptsdts.pts_32_30 = 0;
	tsh264pes->tsptsdts.pts_29_15 = 0;
	tsh264pes->tsptsdts.pts_14_0 = 0;

	tsh264pes->tsptsdts.reserved_1 = 0x0003;                                 //ÌîÐ´ ptsÐÅÏ¢
	// Videopts´óÓÚ30bit£¬Ê¹ÓÃ×î¸ßÈýÎ» 
	if (Videopts > 0x7FFFFFFF)
	{
		tsh264pes->tsptsdts.pts_32_30 = (Videopts >> 30) & 0x07;
		tsh264pes->tsptsdts.marker_bit1 = 0x01;
	}
	else
	{
		tsh264pes->tsptsdts.marker_bit1 = 0;
	}
	// Videopts´óÓÚ15bit£¬Ê¹ÓÃ¸ü¶àµÄÎ»À´´æ´¢
	if (Videopts > 0x7FFF)
	{
		tsh264pes->tsptsdts.pts_29_15 = (Videopts >> 15) & 0x007FFF;
		tsh264pes->tsptsdts.marker_bit2 = 0x01;
	}
	else
	{
		tsh264pes->tsptsdts.marker_bit2 = 0;
	}
	//Ê¹ÓÃ×îºó15Î»
	tsh264pes->tsptsdts.pts_14_0 = Videopts & 0x007FFF;
	tsh264pes->tsptsdts.marker_bit3 = 0x01;

	return h264pes_pos;
}


int Read_One_H264_Frame(unsigned char * buf,unsigned int * videoframetype)
{
	NALU_t * n = NULL;
	unsigned int video_buf_size = 0;

	//·ÖÅänal ×ÊÔ´
	n = AllocNALU(MAX_VIDEO_TAG_BUF_SIZE); 

	//¶ÁÈ¡Ò»Ö¡Êý¾Ý
	int startcodeprefix_size = GetAnnexbNALU(n);
	if (startcodeprefix_size == 0)
	{
		decode_video_done = 1;
		return 0;
	}
	//ÅÐ¶ÏÖ¡ÀàÐÍ
	GetFrameType(n);
	*videoframetype = n->Frametype;

	if (n->startcodeprefix_len == 3)
	{
		buf[0] = 0x00;
		buf[1] = 0x00;
		buf[2] = 0x01;
		memcpy(buf + 3,n->buf,n->len);
	}
	else if (n->startcodeprefix_len == 4)
	{
		buf[0] = 0x00;
		buf[1] = 0x00;
		buf[2] = 0x00;
		buf[3] = 0x01;
		memcpy(buf + 4,n->buf,n->len);
	}
	else
	{
		printf("H264¶ÁÈ¡´íÎó£¡\n");
		getchar();
	}

	video_buf_size = n->startcodeprefix_len + n->len;

	FreeNALU(n);                                                   //ÊÍ·Ånal ×ÊÔ´ 
	return video_buf_size;
}


int GetAnnexbNALU (NALU_t * nalu)
{
	int pos = 0;                  //Ò»¸önalµ½ÏÂÒ»¸önal Êý¾ÝÒÆ¶¯µÄÖ¸Õë
	int StartCodeFound  = 0;      //ÊÇ·ñÕÒµ½ÏÂÒ»¸önal µÄÇ°×º
	int rewind = 0;               //ÅÐ¶Ï Ç°×ºËùÕ¼×Ö½ÚÊý 3»ò 4
	unsigned char * Buf = NULL;
	static int info2 =0 ;
	static int info3 =0 ;

	if ((Buf = (unsigned char*)calloc (nalu->max_size , sizeof(char))) == NULL) 
	{
		printf ("GetAnnexbNALU Error: Could not allocate Buf memory\n");
	}

	nalu->startcodeprefix_len = 3;      //³õÊ¼»¯Ç°×ºÎ»Èý¸ö×Ö½Ú

	if (3 != fread (Buf, 1, 3, pVideo_H264_File))//´ÓÎÄ¼þ¶ÁÈ¡Èý¸ö×Ö½Úµ½buf
	{
		free(Buf);
		return 0;
	}
	info2 = FindStartCode2 (Buf);       //Check whether Buf is 0x000001
	if(info2 != 1) 
	{
		//If Buf is not 0x000001,then read one more byte
		if(1 != fread(Buf + 3, 1, 1, pVideo_H264_File))
		{
			free(Buf);
			return 0;
		}
		info3 = FindStartCode3 (Buf);   //Check whether Buf is 0x00000001
		if (info3 != 1)                 //If not the return -1
		{ 
			free(Buf);
			return -1;
		}
		else 
		{
			//If Buf is 0x00000001,set the prefix length to 4 bytes
			pos = 4;
			nalu->startcodeprefix_len = 4;
		}
	} 
	else
	{
		//If Buf is 0x000001,set the prefix length to 3 bytes
		pos = 3;
		nalu->startcodeprefix_len = 3;
	}
	//Ñ°ÕÒÏÂÒ»¸ö×Ö·û·ûºÅÎ»£¬ ¼´ Ñ°ÕÒÒ»¸önal ´ÓÒ»¸ö0000001 µ½ÏÂÒ»¸ö00000001
	StartCodeFound = 0;
	info2 = 0;
	info3 = 0;
	while (!StartCodeFound)
	{
		if (feof (pVideo_H264_File))                                 //Èç¹ûµ½ÁËÎÄ¼þ½áÎ²
		{
			nalu->len = (pos-1) - nalu->startcodeprefix_len;  //´Ó0 ¿ªÊ¼
			memcpy (nalu->buf, &Buf[nalu->startcodeprefix_len], nalu->len);     
			nalu->forbidden_bit = nalu->buf[0] & 0x80;      // 1 bit--10000000
			nalu->nal_reference_idc = nalu->buf[0] & 0x60;  // 2 bit--01100000
			nalu->nal_unit_type = (nalu->buf[0]) & 0x1f;    // 5 bit--00011111
			free(Buf);
			return ((info3 == 1)? 4 : 3);
		}
		Buf[pos++] = fgetc (pVideo_H264_File);                       //Read one char to the Buffer Ò»¸ö×Ö½ÚÒ»¸ö×Ö½Ú´ÓÎÄ¼þÏòºóÕÒ
		info3 = FindStartCode3(&Buf[pos-4]);		        //Check whether Buf is 0x00000001 
		if(info3 != 1)
		{
			info2 = FindStartCode2(&Buf[pos-3]);            //Check whether Buf is 0x000001
		}
		StartCodeFound = (info2 == 1 || info3 == 1);        //Èç¹ûÕÒµ½ÏÂÒ»¸öÇ°×º
	}

	rewind = (info3 == 1)? -4 : -3;

	if (0 != fseek (pVideo_H264_File, rewind, SEEK_CUR))			    //½«ÎÄ¼þÄÚ²¿Ö¸ÕëÒÆ¶¯µ½ nal µÄÄ©Î²
	{
		free(Buf);
		printf("GetAnnexbNALU Error: Cannot fseek in the bit stream file");
	}

	nalu->len = (pos + rewind) -  nalu->startcodeprefix_len;       //ÉèÖÃ°üº¬nal Í·µÄÊý¾Ý³¤¶È
	memcpy (nalu->buf, &Buf[nalu->startcodeprefix_len], nalu->len);//¿½±´Ò»¸önal Êý¾Ýµ½Êý×éÖÐ
	nalu->forbidden_bit = nalu->buf[0] & 0x80;                     //1 bit  ÉèÖÃnal Í·
	nalu->nal_reference_idc = nalu->buf[0] & 0x60;                 // 2 bit
	nalu->nal_unit_type = (nalu->buf[0]) & 0x1f;                   // 5 bit
	free(Buf);
	return ((info3 == 1)? 4 : 3);                                               
}

#define ADTS_HEADER_LENGTH         7


//ADTS Í·ÖÐÏà¶ÔÓÐÓÃµÄÐÅÏ¢ ²ÉÑùÂÊ¡¢ÉùµÀÊý¡¢Ö¡³¤¶È
//adtsÍ·
typedef struct
{
	unsigned int syncword;  //12 bslbf Í¬²½×ÖThe bit string ¡®1111 1111 1111¡¯£¬ËµÃ÷Ò»¸öADTSÖ¡µÄ¿ªÊ¼
	unsigned int id;        //1 bslbf   MPEG ±êÊ¾·û, ÉèÖÃÎª1
	unsigned int layer;     //2 uimsbf Indicates which layer is used. Set to ¡®00¡¯
	unsigned int protection_absent;  //1 bslbf  ±íÊ¾ÊÇ·ñÎóÂëÐ£Ñé
	unsigned int profile;            //2 uimsbf  ±íÊ¾Ê¹ÓÃÄÄ¸ö¼¶±ðµÄAAC£¬Èç01 Low Complexity(LC)--- AACLC
	unsigned int sf_index;           //4 uimsbf  ±íÊ¾Ê¹ÓÃµÄ²ÉÑùÂÊÏÂ±ê
	unsigned int private_bit;        //1 bslbf 
	unsigned int channel_configuration;  //3 uimsbf  ±íÊ¾ÉùµÀÊý
	unsigned int original;               //1 bslbf 
	unsigned int home;                   //1 bslbf 
	/*ÏÂÃæµÄÎª¸Ä±äµÄ²ÎÊý¼´Ã¿Ò»Ö¡¶¼²»Í¬*/
	unsigned int copyright_identification_bit;   //1 bslbf 
	unsigned int copyright_identification_start; //1 bslbf
	unsigned int aac_frame_length;               // 13 bslbf  Ò»¸öADTSÖ¡µÄ³¤¶È°üÀ¨ADTSÍ·ºÍraw data block
	unsigned int adts_buffer_fullness;           //11 bslbf     0x7FF ËµÃ÷ÊÇÂëÂÊ¿É±äµÄÂëÁ÷
	/*no_raw_data_blocks_in_frame ±íÊ¾ADTSÖ¡ÖÐÓÐnumber_of_raw_data_blocks_in_frame + 1¸öAACÔ­Ê¼Ö¡.
	ËùÒÔËµnumber_of_raw_data_blocks_in_frame == 0 
	±íÊ¾ËµADTSÖ¡ÖÐÓÐÒ»¸öAACÊý¾Ý¿é²¢²»ÊÇËµÃ»ÓÐ¡£(Ò»¸öAACÔ­Ê¼Ö¡°üº¬Ò»¶ÎÊ±¼äÄÚ1024¸ö²ÉÑù¼°Ïà¹ØÊý¾Ý)
    */
	unsigned int no_raw_data_blocks_in_frame;    //2 uimsfb
} ADTS_HEADER;

int Detach_Head_Aac(ADTS_HEADER * adtsheader,unsigned char *Adts_Headr_Buf)
{
	unsigned int readsize = 0;
	readsize = ReadFile(pAudio_Aac_File ,Adts_Headr_Buf,ADTS_HEADER_LENGTH);
	if (readsize < 0) {
		printf("ReadFile : pAudio_Aac_File ERROR\n");
		return getchar();
	}

	if (readsize == 0) {
		return readsize;
	}

	if ((Adts_Headr_Buf[0] == 0xFF)&&((Adts_Headr_Buf[1] & 0xF0) == 0xF0))    //syncword 12¸ö1
	{
		adtsheader->syncword = (Adts_Headr_Buf[0] << 4 )  | (Adts_Headr_Buf[1]  >> 4);
		adtsheader->id = ((unsigned int) Adts_Headr_Buf[1] & 0x08) >> 3;
		adtsheader->layer = ((unsigned int) Adts_Headr_Buf[1] & 0x06) >> 1;
		adtsheader->protection_absent = (unsigned int) Adts_Headr_Buf[1] & 0x01;
		adtsheader->profile = ((unsigned int) Adts_Headr_Buf[2] & 0xc0) >> 6;
		adtsheader->sf_index = ((unsigned int) Adts_Headr_Buf[2] & 0x3c) >> 2;
		adtsheader->private_bit = ((unsigned int) Adts_Headr_Buf[2] & 0x02) >> 1;
		adtsheader->channel_configuration = ((((unsigned int) Adts_Headr_Buf[2] & 0x01) << 2) | (((unsigned int) Adts_Headr_Buf[3] & 0xc0) >> 6));
		adtsheader->original = ((unsigned int) Adts_Headr_Buf[3] & 0x20) >> 5;
		adtsheader->home = ((unsigned int) Adts_Headr_Buf[3] & 0x10) >> 4;
		adtsheader->copyright_identification_bit = ((unsigned int) Adts_Headr_Buf[3] & 0x08) >> 3;
		adtsheader->copyright_identification_start = (unsigned int) Adts_Headr_Buf[3] & 0x04 >> 2;		
		adtsheader->aac_frame_length = (((((unsigned int) Adts_Headr_Buf[3]) & 0x03) << 11) | (((unsigned int) Adts_Headr_Buf[4] & 0xFF) << 3)| ((unsigned int) Adts_Headr_Buf[5] & 0xE0) >> 5) ;
		adtsheader->adts_buffer_fullness = (((unsigned int) Adts_Headr_Buf[5] & 0x1f) << 6 | ((unsigned int) Adts_Headr_Buf[6] & 0xfc) >> 2);
		adtsheader->no_raw_data_blocks_in_frame = ((unsigned int) Adts_Headr_Buf[6] & 0x03);
	} else {
		printf("ADTS_HEADER : BUF ERROR\n");
		getchar();
	}

	return readsize;
}

int Read_One_Aac_Frame(unsigned char * buf)
{
	ADTS_HEADER  adts_header ;
	unsigned int readsize = 0;

	//¶ÁÈ¡ADTSÍ·
	if (!Detach_Head_Aac(&adts_header,buf)) {
		decode_audio_done = 1;
		return 0;
	}

	//½«dataÌîÈëbufzÖÐ
	readsize = ReadFile(pAudio_Aac_File ,buf + ADTS_HEADER_LENGTH ,adts_header.aac_frame_length - ADTS_HEADER_LENGTH);
	if (readsize != adts_header.aac_frame_length - ADTS_HEADER_LENGTH) {
		printf("READ ADTS_DATA : BUF LENGTH ERROR\n");
		return -1;
	}
	
	return adts_header.aac_frame_length;
}

int AAC2PES(TsPes *tsaacpes, unsigned long Adudiopts)
{
	unsigned int aacpes_pos = 0;
	unsigned int OneFrameLen_AAC = 0;

	//¶ÁÈ¡³öÒ»Ö¡Êý¾Ý
	OneFrameLen_AAC = Read_One_Aac_Frame(tsaacpes->Es);
	aacpes_pos += OneFrameLen_AAC ;

	tsaacpes->packet_start_code_prefix = 0x000001;
	tsaacpes->stream_id = TS_AAC_STREAM_ID;                                //E0~EF±íÊ¾ÊÇÊÓÆµµÄ,C0~DFÊÇÒôÆµ,H264-- E0
	tsaacpes->PES_packet_length = 0 ; // OneFrameLen_AAC + 8 ;             //Ò»Ö¡Êý¾ÝµÄ³¤¶È ²»°üº¬ PES°üÍ· ,8×ÔÊÊÓ¦¶ÎµÄ³¤¶È
	tsaacpes->Pes_Packet_Length_Beyond = OneFrameLen_AAC;                  //= OneFrameLen_aac;     //ÕâÀï¶Á´íÁËÒ»Ö¡  
	if (OneFrameLen_AAC > 0xFFFF)                                          //Èç¹ûÒ»Ö¡Êý¾ÝµÄ´óÐ¡³¬³ö½çÏÞ
	{
		tsaacpes->PES_packet_length = 0x00;
		tsaacpes->Pes_Packet_Length_Beyond = OneFrameLen_AAC;  
		aacpes_pos += 16;
	}
	else
	{
		tsaacpes->PES_packet_length = 0x00;
		tsaacpes->Pes_Packet_Length_Beyond = OneFrameLen_AAC;  
		aacpes_pos += 14;
	}
	tsaacpes->marker_bit = 0x02;
	tsaacpes->PES_scrambling_control = 0x00;                               //ÈËÑ¡×Ö¶Î ´æÔÚ£¬²»¼ÓÈÅ
	tsaacpes->PES_priority = 0x00;
	tsaacpes->data_alignment_indicator = 0x00;
	tsaacpes->copyright = 0x00;
	tsaacpes->original_or_copy = 0x00;
	tsaacpes->PTS_DTS_flags = 0x02;                                        //10'£ºPTS×Ö¶Î´æÔÚ,DTS²»´æÔÚ
	tsaacpes->ESCR_flag = 0x00;
	tsaacpes->ES_rate_flag = 0x00;
	tsaacpes->DSM_trick_mode_flag = 0x00;
	tsaacpes->additional_copy_info_flag = 0x00;
	tsaacpes->PES_CRC_flag = 0x00;
	tsaacpes->PES_extension_flag = 0x00;
	tsaacpes->PES_header_data_length = 0x05;                               //ºóÃæµÄÊý¾Ý °üÀ¨ÁËPTSËùÕ¼µÄ×Ö½ÚÊý

	//Çå 0 
	tsaacpes->tsptsdts.pts_32_30  = 0;
	tsaacpes->tsptsdts.pts_29_15 = 0;
	tsaacpes->tsptsdts.pts_14_0 = 0;

	tsaacpes->tsptsdts.reserved_1 = 0x03;                                 //ÌîÐ´ ptsÐÅÏ¢
	// Adudiopts´óÓÚ30bit£¬Ê¹ÓÃ×î¸ßÈýÎ» 
	if(Adudiopts > 0x7FFFFFFF)
	{
		tsaacpes->tsptsdts.pts_32_30 = (Adudiopts >> 30) & 0x07;                 
		tsaacpes->tsptsdts.marker_bit1 = 0x01;
	}
	else 
	{
		tsaacpes->tsptsdts.marker_bit1 = 0;
	}
	// Videopts´óÓÚ15bit£¬Ê¹ÓÃ¸ü¶àµÄÎ»À´´æ´¢
	if(Adudiopts > 0x7FFF)
	{
		tsaacpes->tsptsdts.pts_29_15 = (Adudiopts >> 15) & 0x007FFF ;
		tsaacpes->tsptsdts.marker_bit2 = 0x01;
	}
	else
	{
		tsaacpes->tsptsdts.marker_bit2 = 0;
	}
	//Ê¹ÓÃ×îºó15Î»
	tsaacpes->tsptsdts.pts_14_0 = Adudiopts & 0x007FFF;
	tsaacpes->tsptsdts.marker_bit3 = 0x01;

	return aacpes_pos;
}


